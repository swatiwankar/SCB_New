<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" ignored="0" total="3" passed="1">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="46258" started-at="2017-10-25T06:26:45Z" finished-at="2017-10-25T06:27:31Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="46258" started-at="2017-10-25T06:26:45Z" finished-at="2017-10-25T06:27:31Z">
      <class name="SCB.SCM_Automation.TestCase">
        <test-method status="PASS" signature="initialize()[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="initialize" is-config="true" duration-ms="372" started-at="2017-10-25T11:56:45Z" finished-at="2017-10-25T11:56:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialize -->
        <test-method status="PASS" signature="precondition(java.lang.reflect.Method)[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="precondition" is-config="true" duration-ms="16163" started-at="2017-10-25T11:56:45Z" finished-at="2017-10-25T11:57:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void SCB.SCM_Automation.TestCase.Test_case_1() throws com.codoid.products.exception.FilloException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- precondition -->
        <test-method status="FAIL" signature="Test_case_1()[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="Test_case_1" duration-ms="5624" started-at="2017-10-25T11:57:01Z" finished-at="2017-10-25T11:57:07Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Thank you for your registration] but found [Error: Username already exists]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Thank you for your registration] but found [Error: Username already exists]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertEqualsImpl(Assert.java:134)
	at org.testng.Assert.assertEquals(Assert.java:115)
	at org.testng.Assert.assertEquals(Assert.java:189)
	at org.testng.Assert.assertEquals(Assert.java:199)
	at SCB.SCM_Automation.TestCase.Test_case_1(TestCase.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test_case_1 -->
        <test-method status="PASS" signature="Reporter(org.testng.ITestResult)[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="Reporter" is-config="true" duration-ms="239" started-at="2017-10-25T11:57:07Z" finished-at="2017-10-25T11:57:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Test_case_1 status=FAILURE method=TestCase.Test_case_1()[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Reporter -->
        <test-method status="PASS" signature="precondition(java.lang.reflect.Method)[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="precondition" is-config="true" duration-ms="11927" started-at="2017-10-25T11:57:07Z" finished-at="2017-10-25T11:57:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void SCB.SCM_Automation.TestCase.testCase_2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- precondition -->
        <test-method status="SKIP" signature="testCase_2()[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="testCase_2" duration-ms="1" started-at="2017-10-25T11:57:19Z" finished-at="2017-10-25T11:57:19Z">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[This test case is skipped]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: This test case is skipped
	at SCB.SCM_Automation.TestCase.testCase_2(TestCase.java:113)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase_2 -->
        <test-method status="PASS" signature="Reporter(org.testng.ITestResult)[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="Reporter" is-config="true" duration-ms="9" started-at="2017-10-25T11:57:19Z" finished-at="2017-10-25T11:57:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase_2 status=SKIP method=TestCase.testCase_2()[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Reporter -->
        <test-method status="PASS" signature="precondition(java.lang.reflect.Method)[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="precondition" is-config="true" duration-ms="11264" started-at="2017-10-25T11:57:19Z" finished-at="2017-10-25T11:57:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void SCB.SCM_Automation.TestCase.testCase_3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- precondition -->
        <test-method status="PASS" signature="testCase_3()[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="testCase_3" duration-ms="1" started-at="2017-10-25T11:57:30Z" finished-at="2017-10-25T11:57:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase_3 -->
        <test-method status="PASS" signature="Reporter(org.testng.ITestResult)[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="Reporter" is-config="true" duration-ms="190" started-at="2017-10-25T11:57:30Z" finished-at="2017-10-25T11:57:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase_3 status=SUCCESS method=TestCase.testCase_3()[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Reporter -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:SCB.SCM_Automation.TestCase@5025a98f]" name="tearDown" is-config="true" duration-ms="425" started-at="2017-10-25T11:57:31Z" finished-at="2017-10-25T11:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- SCB.SCM_Automation.TestCase -->
      <class name="SCB.SCM_Automation.TestBaseClass">
        <test-method status="PASS" signature="LoadConfigProperties()[pri:0, instance:SCB.SCM_Automation.TestBaseClass@2d928643]" name="LoadConfigProperties" is-config="true" duration-ms="18" started-at="2017-10-25T11:56:45Z" finished-at="2017-10-25T11:56:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoadConfigProperties -->
        <test-method status="PASS" signature="afterSutie()[pri:0, instance:SCB.SCM_Automation.TestBaseClass@2d928643]" name="afterSutie" is-config="true" duration-ms="0" started-at="2017-10-25T11:57:31Z" finished-at="2017-10-25T11:57:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSutie -->
      </class> <!-- SCB.SCM_Automation.TestBaseClass -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
